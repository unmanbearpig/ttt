
==================== FINAL INTERFACE ====================
2017-03-13 06:30:30.771273 UTC

interface main@main:Main 8002
  interface hash: ac8955c53eded73c12b95b6a83ac78d2
  ABI hash: b643b4c96a5101c099622fa874e7d704
  export-list hash: 32dbe43799ee642c59abbf9ae3963580
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ab3dd0ba7d4a42ac4977fc179cbcc0f5
  sig of: Nothing
  used TH splices: True
  where
exports:
  Main.boardChars
  Main.doATurn
  Main.executeCommand
  Main.getCommand
  Main.listBoardCoordinates
  Main.main
  Main.mapC
  Main.moveC
  Main.newBoard
  Main.parse
  Main.player
  Main.playerCoordinates
  Main.printBoard
  Main.queryBoard
  Main.renderBoard
  Main.renderPlayer
  Main.size
  Main.Board{Main.Board _player _playerCoordinates _size}
  Main.Command{Main.MoveBackward Main.MoveForward Main.NoOp}
  Main.Coordinates{Main.Coordinates}
  Main.Player{Main.Player char name}
module dependencies:
package dependencies: StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      adjunctions-4.3@adjunctions-4.3-5CqTSM7liCdC9cb4N2IolK
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-orphans-0.5.4@base-orphans-0.5.4-ABoxiBf7nXc7Qqh66CgYc9
                      bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      comonad-5@comonad-5-ETWy8l913C0Kq2HEAZg6Cb
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-ETyVlWBlFwj93UDOdH22No
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.2@distributive-0.5.2-JCgfTXNR3ywAyV7fFWIBI5
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      free-4.12.4@free-4.12.4-Ab5EFvlPq2CHsY4aRoQQaZ
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.5.0@hashable-1.2.5.0-F4MWeNuv2sjJRqBd2T5ul4
                      integer-gmp-1.0.0.1
                      kan-extensions-5.0.1@kan-extensions-5.0.1-11Ov83x9jJMC3tpuqa2lhG
                      lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-BhL9U5k7NtGJn1itwIHt2Y
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      profunctors-5.2@profunctors-5.2-LrJGukLpH0xCNgg3bhdC7E
                      reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4
                      semigroupoids-5.1@semigroupoids-5.1-Bv4gPJlZIgxJuJyrAzyy1i
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      ttt-0.1.0.0@ttt-0.1.0.0-E8frRn31nZbG2r3ewMIdzk
                      unordered-containers-0.2.7.2@unordered-containers-0.2.7.2-8AmrySQXjRGF6VciYs51fM
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.5.0@hashable-1.2.5.0-F4MWeNuv2sjJRqBd2T5ul4:Data.Hashable.Generic
         reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4:Data.Reflection
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjunctions-4.3-5CqTSM7liCdC9cb4N2IolK:Data.Functor.Rep
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Biff
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Clown
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Flip
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Join
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Joker
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Product
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Sum
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Tannen
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Wrapped
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.0.1@kan-extensions-5.0.1-11Ov83x9jJMC3tpuqa2lhG:Data.Functor.Day
                         kan-extensions-5.0.1@kan-extensions-5.0.1-11Ov83x9jJMC3tpuqa2lhG:Data.Functor.Yoneda
                         lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens.At
                         lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens.Internal.Indexed
                         lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens.Reified
                         lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens.Tuple
                         lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens.Wrapped
                         lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens.Zoom
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         profunctors-5.2@profunctors-5.2-LrJGukLpH0xCNgg3bhdC7E:Data.Profunctor.Rep
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
                         unordered-containers-0.2.7.2@unordered-containers-0.2.7.2-8AmrySQXjRGF6VciYs51fM:Data.HashMap.Base
                         unordered-containers-0.2.7.2@unordered-containers-0.2.7.2-8AmrySQXjRGF6VciYs51fM:Data.HashSet
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.IO.Handle ba98a5b34d78cbf48b41fe58a3735c69
import  -/  base-4.9.1.0:GHC.IO.Handle.FD bf0291e0f2b6c0eca5446f986999f1cc
import  -/  base-4.9.1.0:GHC.IO.Handle.Types 17aa0e2ab137800e3a31992d780c071f
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  base-4.9.1.0:Text.Printf 6701574960cd2af960fec5d940be0c25
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens f4965ea8887193053529b8d20cbe4ce8
import  -/  lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens.Getter 55d0790e52a13505d5e11e0a6836ca1b
import  -/  lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens.Setter b6d2e2db5f51cbded59f37392f681688
import  -/  lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens.TH 87558f3305f5695edc4df107ce6b76ad
import  -/  lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens.Type 723c6f51b68721446deabe579a856ab1
import  -/  text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text 02cbbc20bdd508fabc38de38896bbae0
import  -/  ttt-0.1.0.0@ttt-0.1.0.0-E8frRn31nZbG2r3ewMIdzk:Lib 514996ccb049044c48ee4f4b46644642
a32ca5decb0600976fbd730ca2201171
  $fEqCoordinates :: GHC.Classes.Eq Main.Coordinates
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Coordinates
                  Main.$fEqCoordinates_$c==
                  Main.$fEqCoordinates_$c/= -}
a32ca5decb0600976fbd730ca2201171
  $fEqCoordinates_$c/= ::
    Main.Coordinates -> Main.Coordinates -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)),1*U(1*U(U))><S(S(S)),1*U(1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Coordinates) (b :: Main.Coordinates) ->
                 case a of wild { Main.Coordinates a1 ->
                 case b of wild1 { Main.Coordinates b1 ->
                 case a1 of wild2 { GHC.Types.I# x ->
                 case b1 of wild3 { GHC.Types.I# y ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# x y) of wild4 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } } } }) -}
a32ca5decb0600976fbd730ca2201171
  $fEqCoordinates_$c== ::
    Main.Coordinates -> Main.Coordinates -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)),1*U(1*U(U))><S(S(S)),1*U(1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Coordinates) (ds1 :: Main.Coordinates) ->
                 case ds of wild { Main.Coordinates a1 ->
                 case ds1 of wild1 { Main.Coordinates b1 ->
                 GHC.Classes.eqInt a1 b1 } }) -}
19f7fe77a99c74d45c239225d7c4d55a
  $fShowPlayer :: GHC.Show.Show Main.Player
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Player
                  Main.$fShowPlayer_$cshowsPrec
                  Main.$fShowPlayer_$cshow
                  Main.$fShowPlayer_$cshowList -}
19f7fe77a99c74d45c239225d7c4d55a
  $fShowPlayer1 :: Main.Player -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Main.Player) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.Player ww1 ww2 ->
                 Main.$w$cshowsPrec 0# ww1 ww2 w1 }) -}
1627cb19914b6c2bc567625d9c11db05
  $fShowPlayer2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
20622df7b8641ac47fc501cd18018a3f
  $fShowPlayer3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "char = "#) -}
26ee1e0a4663e03e2154bf393567562c
  $fShowPlayer4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
664516550d02bf50dd391ba47530b0b4
  $fShowPlayer5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "name = "#) -}
c4390020b3adc97d8e240d917f2c1fd5
  $fShowPlayer6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Player {"#) -}
19f7fe77a99c74d45c239225d7c4d55a
  $fShowPlayer_$cshow :: Main.Player -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(1*U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Player) ->
                 Main.$fShowPlayer_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
19f7fe77a99c74d45c239225d7c4d55a
  $fShowPlayer_$cshowList :: [Main.Player] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.Player
                   Main.$fShowPlayer1) -}
19f7fe77a99c74d45c239225d7c4d55a
  $fShowPlayer_$cshowsPrec ::
    GHC.Types.Int -> Main.Player -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U(1*U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Player)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Player ww3 ww4 ->
                 Main.$w$cshowsPrec ww1 ww3 ww4 w2 } }) -}
1772284d9d3a5e3eb518a79054bcbf4d
  $tc'Board :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   740360685848946893##
                   6557210894459781622##
                   Main.$trModule
                   Main.$tc'Board1) -}
3c923f9c729578482d6b4dd3fca43381
  $tc'Board1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Board"#) -}
a885d762251bf156ca1730b8f22711d8
  $tc'Coordinates :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17734237457897624033##
                   12650487802768823702##
                   Main.$trModule
                   Main.$tc'Coordinates1) -}
2d122a107d256d9bef4c2d70317232d1
  $tc'Coordinates1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Coordinates"#) -}
51830df27b5b7fd0d305c6bc0fb07685
  $tc'MoveBackward :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3013327778677247490##
                   8511855418946027937##
                   Main.$trModule
                   Main.$tc'MoveBackward1) -}
21ea49c09e8b4d7ab7b4fbdad289dee0
  $tc'MoveBackward1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'MoveBackward"#) -}
03706e314717e4899c26f8f5f5602697
  $tc'MoveForward :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   790999094609311132##
                   11104525467099634658##
                   Main.$trModule
                   Main.$tc'MoveForward1) -}
654ee2b35ca8971e676eae14154a94b9
  $tc'MoveForward1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'MoveForward"#) -}
4e7a0ad00d55ceff8329cbe3cdf7069f
  $tc'NoOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6129316746266306139##
                   14094036196089305375##
                   Main.$trModule
                   Main.$tc'NoOp1) -}
191a6dd8f443f7fd9240089390d8baf0
  $tc'NoOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NoOp"#) -}
7b2e43aa65590ba08a7c84a7d1a0c4c9
  $tc'Player :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17010828613102551476##
                   586836888357397231##
                   Main.$trModule
                   Main.$tc'Player1) -}
1faa97a3a4ced6ab4144d588df38bf0b
  $tc'Player1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Player"#) -}
4186d484e80c6d9769a01b075c58b2a1
  $tcBoard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6159624193025938527##
                   9152014388441728558##
                   Main.$trModule
                   Main.$tcBoard1) -}
deab13c4ee4756c364cc0736cc4f6365
  $tcBoard1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Board"#) -}
b3f9b948226c383f001ad6253bb6043f
  $tcCommand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2299227943555641831##
                   10040856767533020848##
                   Main.$trModule
                   Main.$tcCommand1) -}
5b4ba384816629152654a8eef340315c
  $tcCommand1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Command"#) -}
d2e5565b818667079f78ad235921c106
  $tcCoordinates :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5698120652394614542##
                   5810848673459936985##
                   Main.$trModule
                   Main.$tcCoordinates1) -}
808660900ab46172a9af6622641e0721
  $tcCoordinates1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Coordinates"#) -}
7fd03265264251f4f1e0919b4429ac6c
  $tcPlayer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11358760409848999033##
                   15819662844239800496##
                   Main.$trModule
                   Main.$tcPlayer1) -}
7e091f52aea2fb8136c2068e60146d08
  $tcPlayer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Player"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
e42fc7fdca0573f03b5ff640e3884260
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Types.Char
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U(1*U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Types.Char)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowPlayer6
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowPlayer5
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows6
                             (GHC.Show.showLitString
                                ww1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      Main.$fShowPlayer4
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Main.$fShowPlayer3
                                         (case ww2 of ww3 { GHC.Types.C# ww4 ->
                                          case ww4 of ds {
                                            DEFAULT
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.shows14
                                                 (GHC.Show.$wshowLitChar
                                                    ds
                                                    (GHC.Types.:
                                                       @ GHC.Types.Char
                                                       GHC.Show.shows14
                                                       (GHC.Base.++
                                                          @ GHC.Types.Char
                                                          Main.$fShowPlayer2
                                                          x)))
                                            '\''#
                                            -> GHC.Base.++
                                                 @ GHC.Types.Char
                                                 GHC.Show.shows13
                                                 (GHC.Base.++
                                                    @ GHC.Types.Char
                                                    Main.$fShowPlayer2
                                                    x) } })))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
4330950652483494b8dff24673fb95e1
  $wboardChars ::
    GHC.Prim.Int#
    -> Main.Coordinates -> Main.Player -> [GHC.Types.Char]
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U(U(U))><L,U(A,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Main.Coordinates)
                   (ww2 :: Main.Player) ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.-# ww 1#
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># 0# y) of wild {
                   GHC.Types.False
                   -> letrec {
                        go :: GHC.Prim.Int# -> [GHC.Types.Char]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Prim.Int#) ->
                          GHC.Types.:
                            @ GHC.Types.Char
                            (case ww1 of wild1 { Main.Coordinates b1 ->
                             case b1 of wild2 { GHC.Types.I# y1 ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x y1) of wild3 {
                               GHC.Types.False -> Main.boardChars1
                               GHC.Types.True
                               -> case ww2 of wild4 { Main.Player ds ds1 -> ds1 } } } })
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x y) of wild1 {
                               GHC.Types.False -> go (GHC.Prim.+# x 1#)
                               GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char })
                      } in
                      go 0#
                   GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }) -}
db11764110aa4c0b401a595c78b4d75a
  $wlistBoardCoordinates :: GHC.Prim.Int# -> [Main.Coordinates]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.-# ww 1#
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># 0# y) of wild {
                   GHC.Types.False
                   -> letrec {
                        go :: GHC.Prim.Int# -> [Main.Coordinates]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Prim.Int#) ->
                          GHC.Types.:
                            @ Main.Coordinates
                            (Main.Coordinates (GHC.Types.I# x))
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x y) of wild1 {
                               GHC.Types.False -> go (GHC.Prim.+# x 1#)
                               GHC.Types.True -> GHC.Types.[] @ Main.Coordinates })
                      } in
                      go 0#
                   GHC.Types.True -> GHC.Types.[] @ Main.Coordinates }) -}
624e0a58df8e972510bde784ebd8e155
  data Board
    = Board {_size :: GHC.Types.Int,
             _playerCoordinates :: Main.Coordinates,
             _player :: Main.Player}
c415ac1164f1991d82b5aecb5359bcc3
  data Command = MoveForward | MoveBackward | NoOp
a32ca5decb0600976fbd730ca2201171
  data Coordinates = Coordinates GHC.Types.Int
19f7fe77a99c74d45c239225d7c4d55a
  data Player
    = Player {name :: GHC.Base.String, char :: GHC.Types.Char}
820242ca619bdad1a22d89946bb5cbf1
  _player :: Main.Board -> Main.Player
  RecSel Left Main.Board
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Board) ->
                 case ds of wild { Main.Board ds1 ds2 ds3 -> ds3 }) -}
c96ae3a9bf63561817ebe9ed776e38dc
  _playerCoordinates :: Main.Board -> Main.Coordinates
  RecSel Left Main.Board
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Board) ->
                 case ds of wild { Main.Board ds1 ds2 ds3 -> ds2 }) -}
e9fbc4454a23988750a04c5727f46236
  _size :: Main.Board -> GHC.Types.Int
  RecSel Left Main.Board
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Board) ->
                 case ds of wild { Main.Board ds1 ds2 ds3 -> ds1 }) -}
e8e260af564e742040c83fb075aadb5e
  boardChars :: Main.Board -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),U(U(U)),U(A,U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Board) ->
                 case w of ww { Main.Board ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Types.I# ww5 ->
                 Main.$wboardChars ww5 ww2 ww3 } }) -}
6415ee4304199cd823612c9ce54c71e0
  boardChars1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '.'#) -}
f24b461b3e1af8b85019a1df8933a8a7
  char :: Main.Player -> GHC.Types.Char
  RecSel Left Main.Player
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Player) ->
                 case ds of wild { Main.Player ds1 ds2 -> ds2 }) -}
49379d59b4bfab35e43ab24453a49456
  doATurn :: Main.Board -> GHC.Types.IO Main.Board
  {- Arity: 2, Strictness: <L,1*U(U,U(U(U)),U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.doATurn1
                  `cast`
                (<Main.Board>_R ->_R Sym (GHC.Types.N:IO[0] <Main.Board>_R)) -}
29b25d3e0fe0f147788afaada174780a
  doATurn1 ::
    Main.Board
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Board #)
  {- Arity: 2, Strictness: <L,1*U(U,U(U(U)),U)><S,U>,
     Unfolding: (\ (b :: Main.Board)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Types.Char
                        GHC.IO.Handle.Text.hGetChar3
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetChar2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Char>_R))
                        eta of ds1 { (#,#) ipv ipv1 ->
                 let {
                   nb :: Main.Board
                   = case ipv1 of wild { GHC.Types.C# ds ->
                     case ds of ds2 {
                       DEFAULT -> b
                       'n'#
                       -> case b of wild1 { Main.Board x1 x2 x3 ->
                          Main.Board
                            x1
                            (case x2 of wild2 { Main.Coordinates x ->
                             Main.Coordinates
                               (case x of wild3 { GHC.Types.I# x4 ->
                                GHC.Types.I# (GHC.Prim.+# x4 1#) }) })
                            x3 }
                       'p'#
                       -> case b of wild1 { Main.Board x1 x2 x3 ->
                          Main.Board
                            x1
                            (case x2 of wild2 { Main.Coordinates x ->
                             Main.Coordinates
                               (case x of wild3 { GHC.Types.I# x4 ->
                                GHC.Types.I# (GHC.Prim.+# x4 -1#) }) })
                            x3 } } }
                 } in
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (Main.renderBoard nb)
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2, nb #) } }) -}
cd99034ee4055a635d27497d83fe5f4e
  executeCommand :: Main.Board -> Main.Command -> Main.Board
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U,U(U(U)),U)><S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Board) (w1 :: Main.Command) ->
                 case w of ww { Main.Board ww1 ww2 ww3 ->
                 case w1 of wild {
                   Main.MoveForward
                   -> Main.Board
                        ww1
                        (case ww2 of wild1 { Main.Coordinates x ->
                         Main.Coordinates
                           (case x of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 1#) }) })
                        ww3
                   Main.MoveBackward
                   -> Main.Board
                        ww1
                        (case ww2 of wild1 { Main.Coordinates x ->
                         Main.Coordinates
                           (case x of wild2 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.+# x1 -1#) }) })
                        ww3
                   Main.NoOp -> Main.Board ww1 ww2 ww3 } }) -}
72289ad2846cff8c9afe21e24e250fdb
  getCommand :: GHC.Types.IO Main.Command
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getCommand1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Main.Command>_R)) -}
cf49ca51a0d94208f28b1491a7b4abdd
  getCommand1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Command #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Types.Char
                        GHC.IO.Handle.Text.hGetChar3
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetChar2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Char>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, Main.parse ipv1 #) }) -}
d712e44a08bd8910eba4d7fa0a841b8c
  listBoardCoordinates :: Main.Board -> [Main.Coordinates]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S(S)LL),1*U(1*U(U),A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Board) ->
                 case w of ww { Main.Board ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Types.I# ww5 ->
                 Main.$wlistBoardCoordinates ww5 } }) -}
35d786266c435664b3a8bc99864a5756
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
f7e6ecdb9dbf9808ab7edbce79db4310
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.hSetBuffering1
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Types.NoBuffering
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.hSetEcho1
                        GHC.IO.Handle.FD.stdin
                        GHC.Types.False
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.Enum.$wenumDeltaInteger
                        Main.main10
                        Main.main9 of ww { (#,#) ww1 ww2 ->
                 case Main.main_go
                        (GHC.Types.: @ GHC.Integer.Type.Integer ww1 ww2)
                        Main.main2
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 (# ipv4, GHC.Tuple.() #) } } } }) -}
edf3864969ce6d2bacf5d8400234fe82
  main10 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
68bc0662108e78f5e7f0ce18ecaa2068
  main11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
fd5cbdb03b78e6a64cf5649cac1b6acf
  main2 :: Main.Board
  {- Unfolding: (Main.Board Main.main8 Main.main6 Main.main3) -}
22f53e680543ed1aa52a1ae7f39948fc
  main3 :: Main.Player
  {- Strictness: m, Unfolding: (Main.Player Main.main5 Main.main4) -}
eaa6d7ab32831266a946df9c19d7c2f1
  main4 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '@'#) -}
91f3b24bcf95dc84440094f2b11d7644
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "blah"#) -}
8a21442cb1ae83d11c4aec5b8d2232d7
  main6 :: Main.Coordinates
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Coordinates Main.main7) -}
97bc73aa61c13d1227c7ff7b2646cad2
  main7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
d94b65d7fd0ba05a4faf539cd918a4b4
  main8 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 70#) -}
5db0ce82d008bc928efdd83ed8faf592
  main9 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
ffabda68bf4ff46d47f0633bd6b9097f
  main_go ::
    [GHC.Integer.Type.Integer]
    -> Main.Board
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Board #)
  {- Arity: 3, Strictness: <S,1*U><L,U(U,U(U(U)),U)><S,U> -}
6d62a89af274dc4773f353edb7320daf
  mapC ::
    (GHC.Types.Int -> GHC.Types.Int)
    -> Main.Coordinates -> Main.Coordinates
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (f :: GHC.Types.Int -> GHC.Types.Int)
                   (ds :: Main.Coordinates) ->
                 case ds of wild { Main.Coordinates x ->
                 Main.Coordinates (f x) }) -}
fa308c24de19d4df0c35c09dd3e5a72e
  moveC :: GHC.Types.Int -> Main.Coordinates -> Main.Coordinates
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U(1*U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (eta :: Main.Coordinates) ->
                 case eta of wild { Main.Coordinates x1 ->
                 Main.Coordinates (GHC.Num.$fNumInt_$c+ x1 x) }) -}
6b5151d9749c88ca0365c34cca560abf
  name :: Main.Player -> GHC.Base.String
  RecSel Left Main.Player
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Player) ->
                 case ds of wild { Main.Player ds1 ds2 -> ds1 }) -}
7ecf99dc4caf0b60924761dca149320c
  newBoard :: GHC.Types.Int -> Main.Board
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (size1 :: GHC.Types.Int) ->
                 Main.Board size1 Main.main6 Main.main3) -}
3ba6fac936d7495fd3e5539e9a86056a
  parse :: GHC.Types.Char -> Main.Command
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Char) ->
                 case ds of wild { GHC.Types.C# ds1 ->
                 case ds1 of ds2 {
                   DEFAULT -> Main.NoOp
                   'n'# -> Main.MoveForward
                   'p'# -> Main.MoveBackward } }) -}
b8a17dc83be8b0b515f33bfb309a3ecb
  player :: Control.Lens.Type.Lens' Main.Board Main.Player
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Main.Player -> f Main.Player)
                   (ds :: Main.Board) ->
                 case ds of wild { Main.Board x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Main.Player
                   @ Main.Board
                   (\ (y1 :: Main.Player) -> Main.Board x1 x2 y1)
                   (f1 x3) }) -}
7f254867f1f1fd5ee8d8ce47a18e69b7
  playerCoordinates ::
    Control.Lens.Type.Lens' Main.Board Main.Coordinates
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Main.Coordinates -> f Main.Coordinates)
                   (ds :: Main.Board) ->
                 case ds of wild { Main.Board x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Main.Coordinates
                   @ Main.Board
                   (\ (y1 :: Main.Coordinates) -> Main.Board x1 y1 x3)
                   (f1 x2) }) -}
3bdb0e445914cbbe371b9e6fa2f3d819
  printBoard :: Main.Board -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,1*U(1*U(U),U(U(U)),U(A,U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.printBoard1
                  `cast`
                (<Main.Board>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
b85e831ca1c1371c975c0b361455a8ac
  printBoard1 ::
    Main.Board
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,1*U(1*U(U),U(U(U)),U(A,U))><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Main.Board)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (Main.renderBoard x)
                   GHC.Types.True
                   eta) -}
fa49c21f71702f4f87a5a309284cea7f
  queryBoard ::
    Main.Board -> Main.Coordinates -> GHC.Base.Maybe Main.Player
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS(S(S))L),1*U(A,1*U(1*U(U)),U)><S(S(S)),1*U(1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (b :: Main.Board) (c :: Main.Coordinates) ->
                 case c of wild { Main.Coordinates a1 ->
                 case b of wild1 { Main.Board x1 x2 x3 ->
                 case x2 of wild2 { Main.Coordinates b1 ->
                 case a1 of wild3 { GHC.Types.I# x ->
                 case b1 of wild4 { GHC.Types.I# y ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# x y) of wild5 {
                   GHC.Types.False -> GHC.Base.Nothing @ Main.Player
                   GHC.Types.True -> GHC.Base.Just @ Main.Player x3 } } } } } }) -}
98590409ebc1f8210d5d78e22badc779
  renderBoard :: Main.Board -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(1*U(U),U(U(U)),U(A,U))>,
     Unfolding: (\ (b :: Main.Board) ->
                 GHC.CString.unpackAppendCString#
                   "|"#
                   (case b of ww { Main.Board ww1 ww2 ww3 ->
                    case ww1 of ww4 { GHC.Types.I# ww5 ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (Main.$wboardChars ww5 ww2 ww3)
                      Main.renderBoard1 } })) -}
831966a316249cf40dd643275f1edffa
  renderBoard1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "|"#) -}
dcaa0310bf6c0fb78ad57542bc10e4df
  renderPlayer :: Main.Player -> GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (0, True, True) Main.char -}
bf4067855cd4be2dd651f7e0056a6839
  size :: Control.Lens.Type.Lens' Main.Board GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.Types.Int -> f GHC.Types.Int)
                   (ds :: Main.Board) ->
                 case ds of wild { Main.Board x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ GHC.Types.Int
                   @ Main.Board
                   (\ (y1 :: GHC.Types.Int) -> Main.Board y1 x2 x3)
                   (f1 x1) }) -}
instance GHC.Classes.Eq [Main.Coordinates] = Main.$fEqCoordinates
instance GHC.Show.Show [Main.Player] = Main.$fShowPlayer
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

